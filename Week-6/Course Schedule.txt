class Solution {
    int globalVis[];
    int dp[];
    public boolean canFinish(int n, int[][] pre) {
        List<Set<Integer>> graph = new ArrayList<>(n);
        for(int i=0;i<n;i++)    graph.add(new HashSet<>());

        for(int i=0;i<pre.length;i++){
            if(pre[i][1] == pre[i][0])  return false;   // checking self loops
            graph.get(pre[i][1]).add(pre[i][0]);
        }        

        globalVis = new int[n];
        dp = new int[n];
        Arrays.fill(dp,-1);

        for(int i=0;i<n;i++){
            if(globalVis[i]==0){
                int start = i;
                int vis[] = new int[n];
                if(isCyclic(graph,start,vis)) return false;
            }
        }

        return true;
        
    }

    public boolean isCyclic(List<Set<Integer>> graph, int cur, int vis[]){

        if(dp[cur]!=-1) return dp[cur]==1;

        vis[cur] = 1;
        globalVis[cur]=1;

        Set<Integer> adj = graph.get(cur);
        for(int n: adj){
            if(vis[n]>0 || isCyclic(graph, n, vis))    return true;
        }

        vis[cur] = 0;
        dp[cur] = 0;
        return false;
    }
}