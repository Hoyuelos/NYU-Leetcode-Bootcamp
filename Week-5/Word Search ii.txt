class Solution {
    public List<String> findWords(char[][] board, String[] words) {
        
        List<String> res = new ArrayList<>();
        int n=board.length, m=board[0].length;
        boolean[][] vis;

        outer:
        for(String word: words){
            vis = new boolean[n][m];
            char first = word.charAt(0);
            for(int i=0;i<n;i++){
                for(int j=0;j<m;j++){
                    if(board[i][j]==first && search(board,i,j,word,0,vis)){
                        res.add(word);
                        continue outer;
                    }
                }
            }   
        }

        return res;
    }

    public boolean search(char[][] board, int i, int j, String word, int k, boolean[][] vis){

        if(k==word.length()-1)    return true;
        int n=board.length, m=board[0].length;
        char next = word.charAt(k+1);

        vis[i][j] = true;

        //right
        if(j+1<m && board[i][j+1]==next && !vis[i][j+1] && search(board,i,j+1,word,k+1,vis))  return true;

        //left
        if(j-1>=0 && board[i][j-1]==next && !vis[i][j-1] && search(board,i,j-1,word,k+1,vis))  return true; 

        //up
        if(i-1>=0 && board[i-1][j]==next && !vis[i-1][j] && search(board,i-1,j,word,k+1,vis))  return true; 

        //down
        if(i+1<n && board[i+1][j]==next && !vis[i+1][j] && search(board,i+1,j,word,k+1,vis))  return true; 

        vis[i][j] = false;
        return false;
    }
}